/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

&lt { tapping-term-ms = <400>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR";
            bindings = <&key_repeat>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        lparan {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <5 4>;
            layers = <0 1 2 3>;
            timeout-ms = <20>;
        };

        rparan {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };

        lbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <28 29>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };

        rbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <30 31>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };

        lbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <16 17>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };

        rbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <18 19>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <2 3>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <3 4>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <15 16>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };

        unders {
            bindings = <&kp UNDERSCORE>;
            key-positions = <7 8>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <8 9>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };

        backsla {
            bindings = <&kp BACKSLASH>;
            key-positions = <19 20>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <14 15>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <20 21>;
            timeout-ms = <20>;
            layers = <0 1 2 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE      &kp Q  &kp W  &kp E  &kp R         &kp T                     &kp Y        &kp U          &kp I            &kp O    &kp P     &lt 3 DEL
&hm CLCK TAB    &kp A  &kp S  &kp D  &kp F         &kp G                     &kp H        &kp J          &kp K            &kp L    &kp SEMI  &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C  &kp V         &kp B                     &kp N        &kp M          &kp COMMA        &kp DOT  &kp FSLH  &kp RIGHT_ALT
                              &mo 1  &kp LEFT_GUI  &mt LEFT_CONTROL ENTER    &lt 2 SPACE  &kp BACKSPACE  &kp RIGHT_SHIFT
            >;
        };

        riser_layer {
            bindings = <
&kp TILDE  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4       &kp NUMBER_5       &kp NUMBER_6  &kp NUMBER_7      &kp NUMBER_8          &kp NUMBER_9          &kp NUMBER_0           &trans
&kp GRAVE  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR         &kp PERCENT        &kp CARET     &kp AMPERSAND     &kp ASTERISK          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans     &trans           &trans        &trans        &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &kp K_MUTE    &ext_power EP_ON  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans                 &trans
                                          &trans        &trans             &trans             &kp SPACE     &trans            &trans
            >;
        };

        lower_layer {
            bindings = <
&trans  &none  &kp PG_UP  &kp UP    &kp PG_DN  &kp HOME    &kp C_VOLUME_UP    &kp PG_UP  &kp UP          &kp PG_DN  &kp HOME  &trans
&trans  &none  &kp LEFT   &kp DOWN  &kp RIGHT  &kp END     &kp C_VOLUME_DOWN  &kp LEFT   &kp DOWN_ARROW  &kp RIGHT  &kp END   &trans
&trans  &none  &none      &none     &none      &none       &kp K_MUTE         &none      &none           &none      &none     &trans
                          &trans    &trans     &trans      &trans             &trans     &trans
            >;
        };

        layer_3 {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6     &trans        &trans        &trans        &trans      &trans  &trans
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &trans  &trans
&trans  &trans  &trans  &trans   &trans   &trans     &trans        &trans        &trans        &trans      &trans  &trans
                        &trans   &trans   &trans     &trans        &trans        &trans
            >;
        };
    };
};
